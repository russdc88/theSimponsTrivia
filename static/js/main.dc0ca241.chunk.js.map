{"version":3,"sources":["components/Navbar/Nav.js","components/SimpsonCards/simpsonsCard.js","App.js","index.js"],"names":["Topnavbar","props","react_default","a","createElement","className","score","highScore","SimpsonsCard","alt","name","src","image","onClick","randomizeCard","id","clicked","data","App","state","simpsons","characters","resetGame","_this","setState","forEach","card","clickedon","alert","handleClick","find","item","console","log","j","x","i","length","Math","floor","random","shuffle","_this2","this","Navbar_Nav","map","character","SimpsonCards_simpsonsCard","key","Component","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"sOAiBeA,eAbG,SAAAC,GAAK,OAGpBC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,yCACdH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACdH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,aAAd,+BACAH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,MAAb,oEAEAH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,WAAb,WAAgCJ,EAAMK,MAAtC,eAAyDL,EAAMM,eCOrDC,SAhBM,SAAAP,GAAK,OACzBC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACdH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACdH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACdH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,+BAA+BI,IAAKR,EAAMS,KAAMC,IAAKV,EAAMW,MAAOC,QAAS,kBAAMZ,EAAMa,cAAcb,EAAMc,GAAId,EAAMe,UAAUC,KAAMhB,EAAMc,MAE3Jb,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uBAEdH,EAAAC,EAAAC,cAAA,uBAFD,IAEyBH,EAAMS,qBC4EnBQ,6MAlEdC,MAAQ,CACPC,SAAUC,EACVf,MAAO,EACPC,UAAW,KAGZe,UAAY,WACRC,EAAKJ,MAAMb,MAAQiB,EAAKJ,MAAMZ,WAChCgB,EAAKC,SAAS,CAACjB,UAAWgB,EAAKJ,MAAMb,QAEtCiB,EAAKJ,MAAMC,SAASK,QAAQ,SAAAC,GAC3BA,EAAKC,WAAY,IAElBJ,EAAKC,SAAS,CAAClB,MAAO,IACtBsB,MAAM,gBAKPC,YAAc,SAACd,EAAGC,GAGjBO,EAAKJ,MAAMC,SAASU,KAAK,SAACC,GACrBA,EAAKhB,KAAOA,IACfiB,QAAQC,IAAIF,IACW,IAAnBA,EAAKJ,WACRI,EAAKJ,WAAY,EACjBJ,EAAKC,SAAS,CAAClB,MAAOiB,EAAKJ,MAAMb,MAAQ,KAGzCiB,EAAKD,eAMR,IAAIF,EAnDN,SAAiBjB,GAChB,IAAI+B,EAAGC,EAAGC,EACV,IAAKA,EAAIjC,EAAEkC,OAAS,EAAGD,EAAI,EAAGA,IAC5BF,EAAII,KAAKC,MAAMD,KAAKE,UAAYJ,EAAI,IACpCD,EAAIhC,EAAEiC,GACNjC,EAAEiC,GAAKjC,EAAE+B,GACT/B,EAAE+B,GAAKC,EAET,OAAOhC,EA2CSsC,CAAQlB,EAAKJ,MAAMC,UAKlCG,EAAKC,SAAS,CACbJ,SAAUA,6EAQH,IAAAsB,EAAAC,KAER,OACCzC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACdH,EAAAC,EAAAC,cAACwC,EAAD,CAAWtC,MAAQqC,KAAKxB,MAAMb,MAAOC,UAAWoC,KAAKxB,MAAMZ,YAC3DL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbsC,KAAKxB,MAAMC,SAASyB,IAAI,SAAAC,GAAS,OACjC5C,EAAAC,EAAAC,cAAC2C,EAAD,CAAcjC,cAAe4B,EAAKb,YAAamB,IAAMF,EAAU/B,GAAIL,KAAMoC,EAAUpC,KAAME,MAAOkC,EAAUlC,MAAOG,GAAK+B,EAAU/B,GAAIC,QAAS8B,EAAUnB,uBA3D3IsB,aCblBC,IAASC,OAAOjD,EAAAC,EAAAC,cAACgD,EAAD,MAASC,SAASC,eAAe","file":"static/js/main.dc0ca241.chunk.js","sourcesContent":["import React from 'react';\n\nimport './Nav.css';\n\nconst Topnavbar = props => (\n\t\n\t\t\n\t\t\t<div className=\"jumbotron jumbotron-fluid text-center\">\n\t\t\t\t<div className=\"container\">\n\t\t\t\t\t<h1 className=\"display-4\">Simpsons Memorization Game!</h1>\n\t\t\t\t\t<p className=\"h4\">Click on an image. Don't click the same image twice or you lose!</p>\n\n\t\t\t\t\t<p className=\"h4 pt-3\"> Score: {props.score} Highscore: {props.highScore}</p>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t)\n\nexport default Topnavbar;","import React from \"react\"\nimport \"./simpsonsCard.css\"\n\nconst SimpsonsCard = props => (\n\t<div className=\"col-lg-4 \">\n\t\t<div className=\"card m-4 buffer\">\n\t\t\t<div className=\"img-container \">\n\t\t\t\t<img className=\"rounded mx-auto d-block pt-2\" alt={props.name} src={props.image} onClick={() => props.randomizeCard(props.id, props.clicked)} data={props.id}/>\n\t\t\t</div>\n\t\t\t<div className=\"content text-center\">\n\n\t\t\t\t<strong>Name:</strong> {props.name}\n\n\t\t\t</div>\n\n\t\t</div>\n\t</div>\n)\n\nexport default SimpsonsCard;\n","import React, { Component } from 'react';\nimport './App.css';\nimport Topnavbar from './components/Navbar/Nav';\nimport SimpsonsCard from './components/SimpsonCards/simpsonsCard'\nimport characters from './simpsons.json'\n\nfunction shuffle(a) {\n\tvar j, x, i;\n\tfor (i = a.length - 1; i > 0; i--) {\n\t\t\tj = Math.floor(Math.random() * (i + 1));\n\t\t\tx = a[i];\n\t\t\ta[i] = a[j];\n\t\t\ta[j] = x;\n\t}\n\treturn a;\n}\n\n\n\nclass App extends Component {\n\n\tstate = {\n\t\tsimpsons: characters,\n\t\tscore: 0,\n\t\thighScore: 0\n\t}\n\n\tresetGame = () => {\n\t\tif(this.state.score > this.state.highScore){\n\t\t\tthis.setState({highScore: this.state.score})\n\t\t}\n\t\tthis.state.simpsons.forEach(card =>{\n\t\t\tcard.clickedon = false\n\t\t})\n\t\tthis.setState({score: 0})\n\t\talert('Game over')\n\t}\n\t\n\n\n\thandleClick = (id,clicked) => {\n\t\n\n\t\tthis.state.simpsons.find((item) => {\n\t\t\tif (item.id === id){\n\t\t\t\tconsole.log(item)\n\t\t\t\tif (item.clickedon === false){\n\t\t\t\t\titem.clickedon = true\n\t\t\t\t\tthis.setState({score: this.state.score + 1})\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tthis.resetGame()\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\t\t\n\t\t\n\t\tlet simpsons = shuffle(this.state.simpsons)\n\n\n\n\n\t\tthis.setState({\n\t\t\tsimpsons: simpsons\n\t\t})\n\t\t\t\t\n    \n  };\n\n\n\n\trender() {\n\t\t\n\t\treturn (\n\t\t\t<div className='App'>\n\t\t\t\t<Topnavbar score= {this.state.score} highScore={this.state.highScore} />\n\t\t\t\t<div className=\"row\">\n\t\t\t\t\t{this.state.simpsons.map(character => (\n\t\t\t\t\t\t<SimpsonsCard randomizeCard={this.handleClick} key= {character.id} name={character.name} image={character.image} id= {character.id} clicked={character.clickedon}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t))}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import './index.css';\nimport App from './App';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\n\n"],"sourceRoot":""}